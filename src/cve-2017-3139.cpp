#include "dns_server.hpp"
#include <boost/program_options.hpp>
#include <iostream>

const int   TTL          = 5;
const char *BIND_ADDRESS = "127.0.0.1";

class CNAMEServer : public dns::DNSServer
{
public:
    CNAMEServer( const std::string addr, uint16_t port ) : dns::DNSServer( addr, port )
    {
    }

    dns::PacketInfo generateResponse( const dns::PacketInfo &query, bool via_tcp )
    {
        dns::PacketInfo           response;
        dns::QuestionSectionEntry query_question = query.question_section[ 0 ];

        dns::QuestionSectionEntry question;
        question.q_domainname = query_question.q_domainname;
        question.q_type       = query_question.q_type;
        question.q_class      = query_question.q_class;
        response.question_section.push_back( question );

        if ( question.q_type == dns::TYPE_DS ) {
            dns::ResponseSectionEntry answer1;

            answer1.r_domainname    = "child.siskrn.co";
            answer1.r_type          = dns::TYPE_SOA;
            answer1.r_class         = query_question.q_class;
            answer1.r_ttl           = TTL;
            answer1.r_resource_data = dns::ResourceDataPtr(
                new dns::RecordSOA( "ns01.child.siskrn.co", "hostmaster.siskrn.co", 1, 3600, 800, 864000, 3600 ) );

            response.authority_section.push_back( answer1 );
        }
        else if ( question.q_type == dns::TYPE_NS ) {
            dns::ResponseSectionEntry answer1;
            dns::ResponseSectionEntry answer2;

            answer1.r_domainname    = "child.siskrn.co";
            answer1.r_type          = dns::TYPE_NS;
            answer1.r_class         = query_question.q_class;
            answer1.r_ttl           = TTL;
            answer1.r_resource_data = dns::ResourceDataPtr(
                new dns::RecordNS( "ns01.child.siskrn.co" ) );

            answer2.r_domainname    = "ns01.child.siskrn.co";
            answer2.r_type          = dns::TYPE_A;
            answer2.r_class         = query_question.q_class;
            answer2.r_ttl           = TTL;
            answer2.r_resource_data = dns::ResourceDataPtr(
                new dns::RecordA( "10.201.8.34" ) );

            response.authority_section.push_back( answer1 );
            response.additional_infomation_section.push_back( answer2 );
        }
        else {
            dns::ResponseSectionEntry answer1;
            answer1.r_domainname    = query_question.q_domainname;
            answer1.r_type          = dns::TYPE_CNAME;
            answer1.r_class         = dns::CLASS_IN;
            answer1.r_ttl           = TTL;
            answer1.r_resource_data = dns::ResourceDataPtr( new dns::RecordCNAME( "www.dtrj.co.jp" ) );

            response.answer_section.push_back( answer1 );
        }

        response.id                   = query.id;
        response.opcode               = 0;
        response.query_response       = 1;
        response.authoritative_answer = 1;
        response.truncation           = 0;
        response.recursion_desired    = 0;
        response.recursion_available  = 0;
        response.zero_field           = 0;
        response.authentic_data       = 1;
        response.checking_disabled    = 1;
        response.response_code        = dns::NO_ERROR;

        if ( !via_tcp ) {
            response.truncation = 1;
        }

        return response;
    }
};

int main( int argc, char **argv )
{
    namespace po = boost::program_options;

    std::string bind_address;

    po::options_description desc( "CNAME Server" );
    desc.add_options()( "help,h", "print this message" )

        ( "bind,b", po::value<std::string>( &bind_address )->default_value( BIND_ADDRESS ), "bind address" );

    po::variables_map vm;
    po::store( po::parse_command_line( argc, argv, desc ), vm );
    po::notify( vm );

    if ( vm.count( "help" ) ) {
        std::cerr << desc << "\n";
        return 1;
    }

    CNAMEServer server( bind_address, 53 );
    server.start();

    return 0;
}
